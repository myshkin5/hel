// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package types_test

import (
	"go/ast"
)

type mockGoDir struct {
	PathCalled chan bool
	PathOutput struct {
		Path chan string
	}
	PackagesCalled chan bool
	PackagesOutput struct {
		Packages chan map[string]*ast.Package
	}
	ImportCalled chan bool
	ImportInput  struct {
		Path, SrcDir chan string
	}
	ImportOutput struct {
		Name chan string
		Pkg  chan *ast.Package
		Err  chan error
	}
}

func newMockGoDir() *mockGoDir {
	m := &mockGoDir{}
	m.PathCalled = make(chan bool, 100)
	m.PathOutput.Path = make(chan string, 100)
	m.PackagesCalled = make(chan bool, 100)
	m.PackagesOutput.Packages = make(chan map[string]*ast.Package, 100)
	m.ImportCalled = make(chan bool, 100)
	m.ImportInput.Path = make(chan string, 100)
	m.ImportInput.SrcDir = make(chan string, 100)
	m.ImportOutput.Name = make(chan string, 100)
	m.ImportOutput.Pkg = make(chan *ast.Package, 100)
	m.ImportOutput.Err = make(chan error, 100)
	return m
}
func (m *mockGoDir) Path() (path string) {
	m.PathCalled <- true
	return <-m.PathOutput.Path
}
func (m *mockGoDir) Packages() (packages map[string]*ast.Package) {
	m.PackagesCalled <- true
	return <-m.PackagesOutput.Packages
}
func (m *mockGoDir) Import(path, srcDir string) (name string, pkg *ast.Package, err error) {
	m.ImportCalled <- true
	m.ImportInput.Path <- path
	m.ImportInput.SrcDir <- srcDir
	return <-m.ImportOutput.Name, <-m.ImportOutput.Pkg, <-m.ImportOutput.Err
}
